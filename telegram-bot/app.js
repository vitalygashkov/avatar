// build-in
const path = require('path');
const fs = require('fs');
const url = require('url');

// package program
const packageJson = require('./package.json');
console.log(`\n=== Sell Logs Bot ${packageJson.version} ===\n`);

// config
const configFile = path.join(__dirname + '/config','config.main.yml');

// plugins
const yaml = require('yaml');
const request = require('request');
const mongoose = require('mongoose');
const Telegraf = require('telegraf');

const Markup = require('telegraf/markup');
const Stage = require("telegraf/stage");
const Scene = require('telegraf/scenes/base')
const session = require("telegraf/session");
const WizardScene = require("telegraf/scenes/wizard");
const { enter, leave } = Stage
const agent = require('socks5-https-client/lib/Agent')
const socksAgent = new agent({ socksHost: '178.197.248.49', socksPort: '1080' });
const config = yaml.parse(fs.readFileSync(configFile, 'utf8').replace(/\${__dirname}/g,__dirname.replace(/\\/g,'/')));
const bot = new Telegraf(config.bot.token);
// const xPub = 'xpub6DJgewN97wB2V52Sfmm6261runiSpsbkgrD5gsbR4MLMRvdWqwMpzT4sz4dsrUvXoTZTLDafwvXdbrQigwWS4S8CGzWV7KhrxdVzX2BhQw4';
// const openExchangeRatesAppID = 'a8a979c7e16a44b28b5eba758d6ab11c'; // to automatically convert USD amounts to BTC at real time rates
// const BitcoinGateway = require('bitcoin-receive-payments');

mongoose.connect('mongodb://localhost/shop',  { useNewUrlParser: true },  function (err) {
   if (err) throw err;
   console.log('[INFO] Database successfully connected');
});
mongoose.set('useFindAndModify', false);

const userSchema = new mongoose.Schema({
	_id: mongoose.Schema.Types.ObjectId,
	tgId: String,
	name: String,
	username: String,
	balance: Number
});
const logSchema = new mongoose.Schema({
	_id: mongoose.Schema.Types.ObjectId,
	values: Array,
	url: String,
	price: Number,
	country: String
});
const orderSchema = new mongoose.Schema({
	_id: mongoose.Schema.Types.ObjectId,
	buyerId: String,
	buyerUsername: String,
	query: String,
	url: String,
	price: Number,
	country: String
});
const transactionSchema = new mongoose.Schema({
	_id: mongoose.Schema.Types.ObjectId,
	userId: String,
	btcWallet: String,
	btcAmount: Number,
	dollarsAmount: Number
});
const paymentSchema = new mongoose.Schema({
	_id: mongoose.Schema.Types.ObjectId,
	userId: String,
	pcs: Number,
	country: String,
	price: Number,
	priceBtc: Number,
	logUrl: String
});

// params
let User = mongoose.model('users', userSchema);
let Log = mongoose.model('logs', logSchema);
let Order = mongoose.model('orders', orderSchema);
let lastUpdate = `${(new Date).getFullYear()}-${(new Date).getMonth()}-${(new Date).getDate()} ${(new Date).getHours()}:${(new Date).getMinutes()}`;
let logsAvailable = 0;

// Emoji: üí≤üí∏‚ÇøüìÖüìÖüì©üì¶üîç

async function syncLogs() {
	let logs = fs.readFileSync('logs.txt', 'utf8').split('\r\n');
	logs.forEach(log => {
		log = log.split('|');
		let newLog = new Log ({
			_id: new mongoose.Types.ObjectId(),
			values: log[0].split(';'),
			url: log[1],
			price: log[2],
			country: log[3]
		});
		newLog.save(function(err) {
			if (err) throw console.log(`[ERROR] Can't add new user to database: ${err}`);
			console.log(`[INFO] New log added`);
		});
	})
}

const welcomeScene = new WizardScene(
	'welcome',
	async ctx => {
		try {
			ctx.editMessageText(
				`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞.\n` +
				`–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ª–æ–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º.\n\n` +
				`üì• <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã:</b> <code>${ctx.session.lastUpdate}\n</code>` +
				`üóÇ <b>–í—Å–µ–≥–æ –ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ:</b> <code>${ctx.session.logsAvailable}\n</code>` +
				`üí≥ <b>–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:</b> <code>\$${ctx.session.balance}</code>`, {
					parse_mode: 'html',
					reply_markup: JSON.stringify({
						inline_keyboard: [
							[{ text: '–ö–æ—à–µ–ª–µ–∫', callback_data: 'wallet_deposit' }],
							[{ text: '–ü–æ–∫—É–ø–∫–∞ –ª–æ–≥–æ–≤', callback_data: 'buy_logs' }],
							[{ text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'get_contact' }]
						]
					})
				}
			)
		} catch (err) {
			if (ctx.session.userId == undefined) {
				await User.findOne({ tgId: `${ctx.update.message.from.id}` }, function(err, user) {
					if (user == null) {
						let newUser = new User ({
							_id: new mongoose.Types.ObjectId(),
							tgId: ctx.update.message.from.id,
							name: ctx.update.message.from.first_name,
							username: ctx.update.message.from.username,
							balance: 0
						});
						newUser.save(function(err) {
							if (err) throw console.log(`[ERROR] Can't add new user to database: ${err}`);
							console.log(`[INFO] <${newUser.username}> registered`);
						});
						ctx.session.userId = newUser._id.toString();
						ctx.session.tgId = ctx.update.message.from.id;
						ctx.session.name = newUser.name;
						ctx.session.username = newUser.username;
						ctx.session.balance = newUser.balance;
					} else {
						if (err) throw console.log(`[ERROR] Can't find user in database: ${err}`);
						ctx.session.userId = user._id.toString();
						ctx.session.tgId = user.tgId;
						ctx.session.name = user.name;
						ctx.session.username = user.username;
						ctx.session.balance = user.balance;
						console.log(`[INFO] <${ctx.session.username}> logged`);
					}
				});
				await Log.countDocuments({}, function(err, count) {
					if (err) throw console.log(`[ERROR] Can't get logs count: ${err}`);
					ctx.session.logsAvailable = count;
				});
				
				// TODO: Get <logs> last modified date
				// ...
				
			};
			ctx.reply(
				`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n` +
				`–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ª–æ–≥–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º.\n\n` +
				`üì• <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã:</b> <code>${ctx.session.lastUpdate}\n</code>` +
				`üóÇ <b>–í—Å–µ–≥–æ –ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ:</b> <code>${ctx.session.logsAvailable}\n</code>` +
				`üí≥ <b>–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:</b> <code>\$${ctx.session.balance}</code>`, {
					parse_mode: 'html',
					reply_markup: JSON.stringify({
						inline_keyboard: [
							[{ text: '–ö–æ—à–µ–ª–µ–∫', callback_data: 'wallet_deposit' }],
							[{ text: '–ü–æ–∫—É–ø–∫–∞ –ª–æ–≥–æ–≤', callback_data: 'buy_logs' }],
							[{ text: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'get_contact' }]
						]
					})
				}
			)
		}
		return ctx.scene.leave();
	}
);

const logsScene = new WizardScene(
	'logs',
	ctx => {
		console.log(`[INFO] <${ctx.session.username}> open Logs Page`);
		ctx.editMessageText(
			`–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞!`,
			Markup.inlineKeyboard([
				[Markup.callbackButton('Amazon', 'amazon')],
				[Markup.callbackButton('eBay', 'ebay')],
				[Markup.callbackButton('PayPal', 'paypal')],
				[Markup.callbackButton('Crypto', 'crypto')],
				[Markup.callbackButton('–ù–∞–∑–∞–¥', 'back')]
			]).extra()
		);
		return ctx.wizard.next();
	},
	async ctx => {
		if (ctx.update.callback_query != undefined) {
			ctx.wizard.state.query = ctx.update.callback_query.data;
			//await syncLogs();
			// TODO: Search <logs> values in database by query
			// ...
			
			
			Log.find({
				values: { $all: [ `${ctx.wizard.state.query}.com` ] }
			}).exec(function(err, logs) {
				if (err) throw err;
				
				ctx.wizard.state.urlList = [];
				ctx.wizard.state.urls = ``;
				let results = ``;
				let outputList = {};
				let countries = [];
				let count = [];
				logs.forEach( function( item ) { 
					let country = outputList[item.country] = outputList[item.country] || {} 
					ctx.wizard.state.urlList.push(item.url);
				});
				for( var country in outputList ) { countries.push({ country: country }) };
				
				for (let i = 0; i < countries.length; i++) {
					countries[i] = countries[i].country;
					count[i] = logs.filter(value => value.country === countries[i]).length;
					results += `<b>${countries[i]}:</b> ${count[i]} ¬∑ `;
				}
				
				if (logs.length == 0) {
					ctx.editMessageText(
						`–ü–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–¥–Ω–µ–µ.`, {
							parse_mode: 'html',
							reply_markup: JSON.stringify({
								inline_keyboard: [
									[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }]
								]
							})
						}
					);
					ctx.wizard.back();
				} else {
					ctx.editMessageText(
						`–ù–∞–π–¥–µ–Ω–æ ${logs.length} –ª–æ–≥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É <code>${ctx.wizard.state.query}.com</code>\n\n${results.substring(0,results.length-3)}\n\nüíé <b>–¶–µ–Ω–∞ 1 –ª–æ–≥–∞:</b> <code>\$${logs[0].price}</code>\nüí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>\$${ctx.session.balance}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ª–æ–≥–æ–≤ –∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n–ü—Ä–∏–º–µ—Ä: <b>5 US</b>`, {
							parse_mode: 'html',
							reply_markup: JSON.stringify({
								inline_keyboard: [
									[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }]
								]
							})
						}
					);
					ctx.wizard.state.countries = countries;
					ctx.wizard.state.countriesCount = count;
				}
			});
			
			return ctx.wizard.next();
		} else if (ctx.message.text) {
		
			ctx.reply(`–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω.`);
			return ctx.scene.leave();
			
			ctx.wizard.state.query = ctx.message.text;
			// TODO: Search <logs> values in database by query (manual input)
			// ...
			
			ctx.reply(
				`–ù–∞–π–¥–µ–Ω–æ ${logs.length} –ª–æ–≥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É <code>${ctx.wizard.state.query}</code>\n\n${results.substring(0,results.length-3)}\n\nüíé <b>–¶–µ–Ω–∞ 1 –ª–æ–≥–∞:</b> <code>$5</code>\nüí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>\$${ctx.session.balance}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ –ª–æ–≥–æ–≤ –∏ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n–ü—Ä–∏–º–µ—Ä: <b>5 US</b>`, {
					parse_mode: 'html',
					reply_markup: JSON.stringify({
						inline_keyboard: [
							[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }]
						]
					})
				}
			);
			
		};
		
	},
	ctx => {
		ctx.wizard.state.pcs = ctx.update.message.text.split(' ')[0];
		ctx.wizard.state.country = ctx.update.message.text.split(' ')[1];
		
		let correctCountry = false;
		let correctCount = false;
		console.log(`urlList: ${ctx.wizard.state.urlList}`);
		for (let i = 0; i < ctx.wizard.state.urlList.length; i++) {
			if (ctx.wizard.state.countries[i] == ctx.wizard.state.country) {
				correctCountry = true;
				if (ctx.wizard.state.pcs <= ctx.wizard.state.countriesCount[i]) {
					
					correctCount = true;
					ctx.wizard.state.urls += `${ctx.wizard.state.urlList[i]}\n`;
					console.log(`added to cart: ${ctx.wizard.state.urlList[i]}`);
					//continue;
				}
			}
			console.log(`url: ${ctx.wizard.state.urlList[i]}`);
		}
		
		if ((ctx.wizard.state.pcs == undefined) || (ctx.wizard.state.country == undefined)) {
			ctx.reply(`‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.`);
			ctx.wizard.back();
		} else if (!correctCountry) {
			ctx.reply(`‚ö† –£–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.`);
			ctx.wizard.back();
		} else if (!correctCount) {
			ctx.reply(`‚ö† –£–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.`);
			ctx.wizard.back();
		} else {
			ctx.wizard.state.price = ctx.wizard.state.pcs * 5;
			if ((ctx.session.balance - ctx.wizard.state.price) >= 0) {
				ctx.reply(
					`–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. \n\n–ó–∞–ø—Ä–æ—Å: ${ctx.wizard.state.query}\n–°—Ç—Ä–∞–Ω–∞: ${ctx.wizard.state.country}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.pcs} —à—Ç.\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: \$${ctx.wizard.state.price}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É.`, {
						parse_mode: 'html',
						reply_markup: JSON.stringify({
							inline_keyboard: [
								[{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }],
								[{ text: '–û–∫', callback_data: 'ok' }]
							]
						})
					}
				);
			} else {
				ctx.reply(
					`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç \$${ctx.wizard.state.price - ctx.session.balance} –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!`, {
						parse_mode: 'html',
						reply_markup: JSON.stringify({
							inline_keyboard: [
								[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }],
							]
						})
					}
				);
				ctx.wizard.back();
				//return ctx.scene.leave();
				}
		}
		return ctx.wizard.next();
	},
	async ctx => {
		if (ctx.update.callback_query.data == 'ok') {
			ctx.session.balance = ctx.session.balance - ctx.wizard.state.price;
			
			await User.findById(ctx.session.userId, function(err, user) {
				if (err) throw console.log(`[ERROR] Can't find user in database: ${err}`);				
				user.balance = ctx.session.balance;
				user.save(function(err) {
					if (err) throw console.log(`[INFO] <${ctx.session.username}> payment error`);;
					console.log(`[INFO] <${ctx.session.username}> completed payment: ${ctx.wizard.state.pcs} ${ctx.wizard.state.country}`);
					
					// TODO: Get log url for output
					// ...
					
					ctx.editMessageText(
						`–í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!\n\n–ó–∞–ø—Ä–æ—Å: ${ctx.wizard.state.query}\n–°—Ç—Ä–∞–Ω–∞: ${ctx.wizard.state.country}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.pcs} —à—Ç.\n\n–°–∫–∞—á–∞—Ç—å: ${ctx.wizard.state.urls}`, {
							parse_mode: 'html',
							reply_markup: JSON.stringify({
								inline_keyboard: [
									[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }]
								]
							})
						}
					);
				});
			});
			ctx.wizard.state.urls = ctx.wizard.state.urls.substring(0,ctx.wizard.state.urls.length-1);
			//console.log(`${ctx.wizard.state.urls}`);
			//console.log(`${ctx.wizard.state.urls.split(/\n/).length} urls = logs`);
			//console.log(`${ctx.wizard.state.urls.split(/\n/)}.toString()`);
			//process.exit();
			for (let i = 0; i < ctx.wizard.state.urls.split(/\n/).length; i++) {
				Log.findOneAndRemove({'url' : ctx.wizard.state.urls.split(/\n/)[i]}, function (err){ 
					let order = new Order ({
						_id: new mongoose.Types.ObjectId(),
						buyerId: ctx.session.tgId,
						buyerUsername: ctx.session.username,
						query: ctx.wizard.state.query,
						url: ctx.wizard.state.urls.split(/\n/).toString(),
						price: ctx.wizard.state.price,
						country: ctx.wizard.state.country
					});
					order.save(function(err) {
						if (err) throw console.log(`[ERROR] Can't save order to database: ${err}`);
					});
					console.log(order);
				});
				
				
			}
		} else if (ctx.update.callback_query.data == 'cancel') {
			ctx.editMessageText(
				`–ó–∞–∫–∞–∑ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω\n\n–ó–∞–ø—Ä–æ—Å: ${ctx.wizard.state.query}\n–°—Ç—Ä–∞–Ω–∞: ${ctx.wizard.state.country}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${ctx.wizard.state.pcs} —à—Ç.\n\n‚ö† –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!`, {
					parse_mode: 'html',
					reply_markup: JSON.stringify({
						inline_keyboard: [
							[{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }]
						]
					})
				}
			);
		}
	return ctx.scene.leave();
	}
);

// Making Deposit Wizard
const walletScene = new WizardScene(
	'wallet',
	ctx => {
		console.log(`[INFO] <${ctx.session.username}> open Wallet Page`);
		ctx.editMessageText(
			`üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>\$${ctx.session.balance}</code>\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USD (—á–∏—Å–ª–æ–º –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç).`, {
				parse_mode: 'html',
				reply_markup: JSON.stringify({
					inline_keyboard: [
						[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
					]
				})
			}
		);
		return ctx.wizard.next();
	},
	ctx => {
		ctx.wizard.state.amount = ctx.update.message.text;

		if ((ctx.wizard.state.amount == undefined) || (isNaN(ctx.wizard.state.amount))) {
			ctx.reply(`‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞`);
			ctx.wizard.back();
		} else {
			
			// TODO: Generating BTC wallet
			// API ID 56776fa3-a99f-4e65-9f9a-132f70c447ba 
			// opennode.setCredentials('56776fa3-a99f-4e65-9f9a-132f70c447ba ');
			// TODO: Calculating currency rate BTC-USD
			// ...
			
			ctx.reply(
				`–î–ª—è –≤–∞—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Bitcoin –∫–æ—à–µ–ª–µ–∫:\n<code>%wallet%</code>\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ <code>\$${ctx.wizard.state.amount}</code>, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <code>%btc% BTC</code> –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫.\n\n–¶–µ–Ω–∞ Bitcoin (–ø–æ –¥–∞–Ω–Ω—ã–º —Å –±–∏—Ä–∂–∏):\n<code>%currency_rate%</code>\n\n‚ö† –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.`, {
					parse_mode: 'html',
					reply_markup: JSON.stringify({
						inline_keyboard: [
							[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data: 'check_payment' }],
							[{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'back' }]
						]
					})
				}
			);
			return ctx.wizard.next();
		}		
	},
	ctx => {
		return ctx.scene.leave();
	}
	
);

const contactScene = new WizardScene(
	'contact',
	ctx => {
		console.log(`[INFO] <${ctx.session.username}> open Contact Page`);
		ctx.editMessageText(
			`–ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.\n\n–ü–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.`, 
			Markup.inlineKeyboard([
				Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
			]).extra()
		);
		return ctx.wizard.next();
	},
	ctx => {
		console.log(`[MESSAGE] <${ctx.session.username}> ${ctx.update.message.text}`);
		ctx.reply(
			`–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ`, 
			Markup.inlineKeyboard([
				Markup.callbackButton('–í–µ—Ä–Ω—É—Ç—å—Å—è', 'back'),
			]).extra()
		);
		return ctx.scene.leave();
	}
);

// Scene registration
const stage = new Stage([walletScene, logsScene, welcomeScene, contactScene], {ttl: 300});
stage.action('back', enter('welcome'));

bot.use(session());
bot.use(stage.middleware());
bot.start(enter('welcome'));

bot.action('wallet_deposit', enter('wallet'));
bot.action('buy_logs', enter('logs'));
bot.action('get_contact', enter('contact'));

bot.startPolling();